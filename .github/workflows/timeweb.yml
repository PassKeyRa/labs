name: TimeWeb

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 unittest2
        if [ -f app_python/timeweb/requirements.txt ]; then pip install -r app_python/timeweb/requirements.txt; fi
    - name: Lint with flake8
      run: |
        cd app_python/timeweb
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build docker and run
      run: |
        docker build -t timeweb app_python/.
        docker run -p 127.0.0.1:50000:50000 -d timeweb
    - name: Test with unittest
      run: |
        cd app_python/tests
        bash check.sh
    - name: Stop the container
      run: |
        docker rm $(docker stop $(docker ps -a -q --filter="ancestor=timeweb"))
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master
      - name: Add snyk
        uses: snyk/actions/setup@master

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./app_python/timeweb
        run: pip install -r requirements.txt

      - name: Snyk run test
        run: snyk test ./app_python/timeweb --sarif-file-output=snyk.sarif
        env: 
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: ["build", "security"]
    steps:
    - uses: actions/checkout@v3
    - name: Login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build & Push
      uses: docker/build-push-action@v2
      with:
        context: ./app_python
        file: ./app_python/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/timeweb:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/timeweb:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/timeweb:buildcache,mode=max
